{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Loading.js","components/Scroll.js","components/ErrorBoundary.js","components/App.js","serviceWorker.js","index.js"],"names":["Card","className","src","this","props","id","alt","name","email","React","Component","CardList","robots","map","robot","key","SearchBox","onChange","searchChange","type","placeholder","Loading","Scroll","children","ErrorBoundary","state","hasError","error","info","setState","App","onSearchChange","event","searchField","target","value","axios","get","then","response","data","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"8RAgBeA,G,6KAZP,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BC,KAAKC,MAAMC,GAArC,YAAmDC,IAAI,UAC/D,6BACI,4BAAKH,KAAKC,MAAMG,MAChB,2BAAIJ,KAAKC,MAAMI,a,GAPhBC,IAAMC,YCkBVC,E,uKAhBD,IACEC,EAAUT,KAAKC,MAAfQ,OACR,OACI,6BAEIA,EAAOC,KAAI,SAAAC,GAAK,OAAI,kBAAC,EAAD,CAChBC,IAAKD,EAAMT,GACXA,GAAIS,EAAMT,GACVE,KAAMO,EAAMP,KACZC,MAAOM,EAAMN,gB,GAVVC,IAAMC,WCadM,E,uKAZP,OACI,yBAAKf,UAAU,OACX,2BACAgB,SAAUd,KAAKC,MAAMc,aACrBjB,UAAU,mCACVkB,KAAK,QACLC,YAAY,uB,GARJX,IAAMC,WCQfW,E,uKANP,OACI,8C,GAHUZ,IAAMC,WCWbY,G,6KARP,OACI,yBAAKjB,GAAG,UACHF,KAAKC,MAAMmB,c,GAJPd,IAAMC,YCiBZc,E,kDAjBX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,UAAU,GAHJ,E,8DAMIC,EAAOC,GACrBzB,KAAK0B,SAAS,CAAEH,UAAU,M,+BAG1B,OAAIvB,KAAKsB,MAAMC,SACJ,wDAEJvB,KAAKC,MAAMmB,a,GAdEd,IAAMC,W,iBCgDnBoB,E,kDAxCX,aAAe,IAAD,8BACV,gBAkCJC,eAAiB,SAAAC,GACb,EAAKH,SAAS,CAAEI,YAAaD,EAAME,OAAOC,SAlC1C,EAAKV,MAAQ,CACTb,OAAQ,GACRqB,YAAa,IAJP,E,gEAOO,IAAD,OAChBG,IAAMC,IAAI,8CAA8CC,MAAK,SAAAC,GACzD,EAAKV,SAAS,CAAEjB,OAAQ2B,EAASC,Y,+BAI/B,IAAD,EAC2BrC,KAAKsB,MAA7Bb,EADH,EACGA,OAAQqB,EADX,EACWA,YACVQ,EAAiB7B,EAAO8B,QAAO,SAAA5B,GAAK,OAAIA,EAAMP,KAAKoC,cAAcC,SAASX,EAAYU,kBAC5F,OAAK/B,EAAOiC,OAQR,yBAAK5C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWiB,aAAcf,KAAK4B,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUnB,OAAQ6B,OAX1B,yBAAKxC,UAAU,MACX,kBAAC,EAAD,W,GApBFQ,IAAMC,WCGJoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,c","file":"static/js/main.5db750ef.chunk.js","sourcesContent":["import React from 'react';\n\nclass Card extends React.Component {\n    render() {\n        return (\n            <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\n                <img src={`https://robohash.org/${this.props.id}?200x200`} alt='robot'/>\n                <div>\n                    <h2>{this.props.name}</h2>\n                    <p>{this.props.email}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nclass CardList extends React.Component {\n    render() {\n        const { robots} = this.props;\n        return (\n            <div>\n                {\n                robots.map(robot => <Card \n                    key={robot.id} \n                    id={robot.id} \n                    name={robot.name} \n                    email={robot.email} />)\n                }\n            </div>\n        );\n    }\n}\n\nexport default CardList;","import React from 'react';\n\nclass SearchBox extends React.Component {\n    render() {\n        return (\n            <div className='pa2'>\n                <input\n                onChange={this.props.searchChange} \n                className='pa3 ba b--green bg-lightest-blue' \n                type='input' \n                placeholder='search robots' />\n            </div>\n        );\n    }\n}\n\nexport default SearchBox;","import React from 'react';\n\nclass Loading extends React.Component {\n    render() {\n        return (\n            <h1>Loading...</h1>\n        )\n    }\n}\n\nexport default Loading;","import React from 'react';\nimport './Scroll.css';\n\nclass Scroll extends React.Component {\n    render() {\n        return (\n            <div id='scroll'>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            hasError: false,\n        }\n    }\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooops. This is not good.</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport './App.css';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport Loading from './Loading';\nimport Scroll from './Scroll'\nimport ErrorBoundary from './ErrorBoundary';\nimport axios from 'axios';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchField: '',\n        };\n    }\n    componentDidMount() {\n        axios.get('https://jsonplaceholder.typicode.com/users').then(response => {\n            this.setState({ robots: response.data })\n\n        })\n    }\n    render() {\n        const { robots, searchField } = this.state;\n        const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n        if (!robots.length) {\n            return (\n                <div className='tc'>\n                    <Loading />\n                </div>\n            );\n        }\n        return (\n            <div className='tc'>\n                <h1 className='f1'>Robofriends</h1>\n                <SearchBox searchChange={this.onSearchChange} />\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        )\n    }\n    onSearchChange = event => {\n        this.setState({ searchField: event.target.value })\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}