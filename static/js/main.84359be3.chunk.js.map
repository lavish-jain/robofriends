{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Loading.js","components/Scroll.js","components/ErrorBoundary.js","components/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","className","src","this","props","id","alt","name","email","React","Component","CardList","robots","map","robot","key","SearchBox","onChange","searchChange","type","placeholder","Loading","Scroll","children","ErrorBoundary","state","hasError","error","info","setState","App","onGetRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","getRobots","dispatch","event","payload","target","value","axios","get","then","response","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.84359be3.chunk.js","sourcesContent":["import React from 'react';\n\nclass Card extends React.Component {\n    render() {\n        return (\n            <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\n                <img src={`https://robohash.org/${this.props.id}?200x200`} alt='robot'/>\n                <div>\n                    <h2>{this.props.name}</h2>\n                    <p>{this.props.email}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nclass CardList extends React.Component {\n    render() {\n        const { robots} = this.props;\n        return (\n            <div>\n                {\n                robots.map(robot => <Card \n                    key={robot.id} \n                    id={robot.id} \n                    name={robot.name} \n                    email={robot.email} />)\n                }\n            </div>\n        );\n    }\n}\n\nexport default CardList;","import React from 'react';\n\nclass SearchBox extends React.Component {\n    render() {\n        return (\n            <div className='pa2'>\n                <input\n                    onChange={this.props.searchChange}\n                    className='pa3 ba b--green bg-lightest-blue'\n                    type='input'\n                    placeholder='search robots' />\n            </div>\n        );\n    }\n}\n\nexport default SearchBox;","import React from 'react';\n\nclass Loading extends React.Component {\n    render() {\n        return (\n            <h1>Loading...</h1>\n        )\n    }\n}\n\nexport default Loading;","import React from 'react';\nimport './Scroll.css';\n\nclass Scroll extends React.Component {\n    render() {\n        return (\n            <div id='scroll'>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            hasError: false,\n        }\n    }\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooops. This is not good.</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport './App.css';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport Loading from './Loading';\nimport Scroll from './Scroll'\nimport ErrorBoundary from './ErrorBoundary';\nimport { connect } from 'react-redux';\nimport { setSearchField, getRobots } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.getRobots.robots,\n        isPending: state.getRobots.isPending,\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\n        onGetRobots: () => dispatch(getRobots()),\n    }\n}\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.props.onGetRobots();\n    }\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n        if (isPending) {\n            return (\n                <div className='tc'>\n                    <Loading />\n                </div>\n            );\n        }\n        return (\n            <div className='tc'>\n                <h1 className='f1'>Robofriends</h1>\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, GET_ROBOTS_FAILED, GET_ROBOTS_PENDING, GET_ROBOTS_SUCCESS } from './constants';\nimport axios from 'axios';\n\nexport const setSearchField = text => {\n    return {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text,\n    };\n};\n\nexport const getRobots = () => dispatch => {\n    dispatch({ type: GET_ROBOTS_PENDING });\n    axios.get('https://jsonplaceholder.typicode.com/users').then(response => {\n        dispatch({type: GET_ROBOTS_SUCCESS, payload: response.data});\n    }).catch(error => {\n        dispatch({type: GET_ROBOTS_FAILED, payload: error});\n    })\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const GET_ROBOTS_PENDING = 'GET_ROBOTS_PENDING';\nexport const GET_ROBOTS_SUCCESS = 'GET_ROBOTS_SUCCESS';\nexport const GET_ROBOTS_FAILED = 'GET_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, GET_ROBOTS_FAILED, GET_ROBOTS_PENDING, GET_ROBOTS_SUCCESS } from './constants';\n\nconst initialStateSearch = {\n    searchField: '',\n    robots: [],\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return {\n                ...state,\n                searchField: action.payload,\n            };\n        default:\n            return state;\n    }\n}\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: '',\n}\n\nexport const getRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case GET_ROBOTS_PENDING:\n            return {\n                ...state,\n                isPending: true,\n            };\n        case GET_ROBOTS_SUCCESS:\n            return {\n                ...state,\n                robots: action.payload,\n                isPending: false,\n            }\n        case GET_ROBOTS_FAILED:\n            return {\n                ...state,\n                isPending: false,\n                error: action.payload,\n            }\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { searchRobots, getRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, getRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}